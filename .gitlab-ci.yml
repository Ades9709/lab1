#variables:
#  VERSION: "4.4.3"
#  DOWNLOAD_LB: "curl -L https://github.com/liquibase/liquibase/releases/download/v${VERSION}/liquibase-${VERSION}.zip --output liquibase-${VERSION}.zip"
#  UNZIP_LB: "unzip -o -d liquibase liquibase-${VERSION}.zip"
Execute-liquibase-commands:
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#    - if: $CI_MERGE_REQUEST_APPROVED
#      when: always  
  tags:
    - Windows
  stage: build
  environment:
    name: main
  script:
    - echo "$CI_COMMIT_BRANCH"
#    - pwd
    - if ($CI_COMMIT_BRANCH -eq "dev") {ren $pwd\properties\dev_liquibase.properties liquibase.properties}
    - if ($CI_COMMIT_BRANCH -eq "qa") {ren $pwd\properties\qa_liquibase.properties liquibase.properties}
    - if ($CI_COMMIT_BRANCH -eq "main") {ren $pwd\properties\prod_liquibase.properties liquibase.properties}
    - Move-Item $pwd\properties\liquibase.properties $pwd
    - if ($CI_COMMIT_BRANCH -eq "dev") {((Get-Content -path $pwd\liquibase.properties -Raw) -replace 'userdb',"$User_DB_dev") | Set-Content -Path $pwd\liquibase.properties}
    - if ($CI_COMMIT_BRANCH -eq "dev") {((Get-Content -path $pwd\liquibase.properties -Raw) -replace 'passworddb',"$Password_DB_dev") | Set-Content -Path $pwd\liquibase.properties}
    - Get-Content -path $pwd\liquibase.properties
    - liquibase status --log-level INFO
#    - liquibase validate --log-level INFO
#    - liquibase checks run --log-level INFO
#    - liquibase tag $CI_COMMIT_SHA --log-level INFO
#    - liquibase update --log-level INFO
#    - liquibase history --log-level INFO

#build:
#  tags:
#    - Windows
#  stage: build
#  environment:
#    name: main
#  script:  
    
#  tags:
#    - Windows
#  stage: build
#  environment:
#    name: main
#  script:
#    - C:\liquibase\liquibase\liquibase validate --log-level INFO
#    - C:\liquibase\liquibase\liquibase checks run --log-level INFO 

#update:
#  tags:
#    - Windows
#  stage: build
#  environment:
#    name: main
#  script:
#    - C:\liquibase\liquibase\liquibase tag version-1 --log-level INFO
#    - C:\liquibase\liquibase\liquibase update --log-level INFO
#    - C:\liquibase\liquibase\liquibase history --log-level INFO
#    - curl -s https://github.com/liquibase/liquibase/releases/latest | grep -o "v.*" | sed s/'>.*'//g |  sed s/'v'//g | sed 's/"//g'
#    - $DOWNLOAD_LB
#    - $UNZIP_LB
#    - echo "Hello, $GITLAB_USER_LOGIN!"
#    - which java
#    - ./liquibase/liquibase --help
#    - ./liquibase/liquibase --url=jdbc:h2:file:./H2_project/liquibase_dev --changeLogFile=./H2_project/myChangeLog.xml --logLevel=info status --verbose

#test-job1:
#  stage: test
#  environment:
#    name: test1
#  script:
#    - $DOWNLOAD_LB
#    - $UNZIP_LB
#    - echo "This job tests liquibase update in test environment"
#    - ./liquibase/liquibase --url=jdbc:h2:file:./H2_project/liquibase_test1 --changeLogFile=./H2_project/myChangeLog.xml --logLevel=info update

#test-job2:
#  stage: test
#  environment:
#    name: test2
#  script:
#    - $DOWNLOAD_LB
#    - $UNZIP_LB
#    - echo "This job tests liquibase rollback in test environment"
#    - ./liquibase/liquibase --url=jdbc:h2:file:./H2_project/liquibase_test2 --changeLogFile=./H2_project/myChangeLog.xml --logLevel=info update
#    - ./liquibase/liquibase --url=jdbc:h2:file:./H2_project/liquibase_test2 --changeLogFile=./H2_project/myChangeLog.xml --logLevel=info rollbackCount 1
